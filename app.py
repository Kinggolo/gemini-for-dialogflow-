import os
import google.generativeai as genai
from flask import Flask, request, jsonify
from dotenv import load_dotenv

# Load environment variables
load_dotenv()
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

# Initialize Gemini AI
genai.configure(api_key=GEMINI_API_KEY)

# Flask app setup
app = Flask(__name__)

# Root route for checking if the server is running
@app.route('/')
def home():
    return "It's working!"

# Health check route
@app.route('/health')
def health_check():
    return jsonify({"status": "ok", "message": "Server is running fine"}), 200

# Custom prompt for Gemini AI
PROMPT_TEMPLATE = """
рддреБрдо рдПрдХ рдкрдврд╝рд╛рдИ рдореЗрдВ рдорджрдж рдХрд░рдиреЗ рд╡рд╛рд▓реЗ рд╕рд╣рд╛рдпрдХ рд╣реЛред рддреБрдореНрд╣рд╛рд░рд╛ рдХрд╛рдо рд╕рд┐рд░реНрдл study-related рд╕рд╡рд╛рд▓реЛрдВ рдХреЗ рдЬрд╡рд╛рдм рджреЗрдирд╛ рд╣реИред

ЁЯУМ **Admin рд╕реЗ Contact:**  
- рдЕрдЧрд░ рдХреЛрдИ user admin рд╕реЗ рдмрд╛рдд рдХрд░рдирд╛ рдЪрд╛рд╣реЗ, рддреЛ professional рддрд░реАрдХреЗ рд╕реЗ рдХрд╣реЛ:  
  "рдЖрдк admin рд╕реЗ рдмрд╛рдд рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП @aveshtrixbot рдкрд░ рд╕рдВрдкрд░реНрдХ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред"

тЪа **Important:**  
- Non-study topics рдкрд░ response рдордд рджреЛред  
- рдЕрдЧрд░ рдХреЛрдИ irrelevant рд╕рд╡рд╛рд▓ рдкреВрдЫреЗ, рддреЛ politely рдХрд╣реЛ:  
  "рдореИрдВ рд╕рд┐рд░реНрдл рдкрдврд╝рд╛рдИ рд╕реЗ рдЬреБрдбрд╝реА рдЬрд╛рдирдХрд╛рд░реА рджреЗ рд╕рдХрддрд╛ рд╣реВрдБред рдЕрдзрд┐рдХ рдЬрд╛рдирдХрд╛рд░реА рдХреЗ рд▓рд┐рдП рдЖрдк admin рд╕реЗ @aveshtrixbot рдкрд░ рд╕рдВрдкрд░реНрдХ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред"
"""

# Function to get Gemini AI response
def get_gemini_response(user_query):
    try:
        model = genai.GenerativeModel("gemini-1.5-flash")
        response = model.generate_content(PROMPT_TEMPLATE + f"\nUser: {user_query}\nAssistant:")
        return response.text if response.text else "рдореБрдЭреЗ рд╕рдордЭ рдирд╣реАрдВ рдЖрдпрд╛, рдХреГрдкрдпрд╛ рдлрд┐рд░ рд╕реЗ рдкреВрдЫреЗрдВред"
    except Exception as e:
        print(f"Error: {e}")
        return "рдЕрднреА рддрдХрдиреАрдХреА рд╕рдорд╕реНрдпрд╛ рд╣реИ, рдХреГрдкрдпрд╛ рдмрд╛рдж рдореЗрдВ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред"

@app.route('/webhook', methods=['POST'])
def dialogflow_webhook():
    req_data = request.get_json()
    
    # Extract user query
    user_query = req_data.get("queryResult", {}).get("queryText", "")
    
    # Call Gemini AI
    response_text = get_gemini_response(user_query)

    # Return response
    return jsonify({"fulfillmentText": response_text})

if __name__ == '__main__':
    app.run(host="0.0.0.0", port=8000)
