import os
import google.generativeai as genai
from flask import Flask, request, jsonify
from dotenv import load_dotenv
from langdetect import detect

# Load environment variables
load_dotenv()
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

# Initialize Gemini AI
genai.configure(api_key=GEMINI_API_KEY)

# Flask app setup
app = Flask(__name__)

# Root route for checking if the server is running
@app.route('/')
def home():
    return "It's working!"

# Health check route
@app.route('/health')
def health_check():
    return jsonify({"status": "ok", "message": "Server is running fine"}), 200

# Default prompt for Gemini AI (One-Day & Competitive Exam Focused)
PROMPT_TEMPLATE = """
рддреБрдо рдПрдХ рд╕реНрдорд╛рд░реНрдЯ рдФрд░ reliable study assistant рд╣реЛ, рдЬрд┐рд╕рдХрд╛ рдЙрджреНрджреЗрд╢реНрдп one-day рдФрд░ competitive exams рдХреА рддреИрдпрд╛рд░реА рдХрд░рдиреЗ рд╡рд╛рд▓реЗ рдЫрд╛рддреНрд░реЛрдВ рдХреА рдорджрдж рдХрд░рдирд╛ рд╣реИред
рддреБрдореНрд╣рд╛рд░реЗ рдЬрд╡рд╛рдм concise, clear, рдФрд░ exam-oriented рд╣реЛрдиреЗ рдЪрд╛рд╣рд┐рдПред

тЬЕ **рддреБрдо рдХрд┐рди рд╡рд┐рд╖рдпреЛрдВ рдореЗрдВ рдорджрдж рдХрд░ рд╕рдХрддреЗ рд╣реЛ?**  
- рд╡рд┐рд╢реЗрд╖ рд░реВрдк рд╕реЗ **Current Affairs** рдкрд░ focus рдХрд░рддреЗ рд╣реБрдП GK, GS, рдФрд░ рдорд╣рддреНрд╡рдкреВрд░реНрдг рдкрд░реАрдХреНрд╖рд╛ рд╕рдВрдмрдВрдзреА рдЬрд╛рдирдХрд╛рд░реА рджреЗрдирд╛ред  
- Daily Current Affairs updates рдФрд░ exam-relevant news summarizationред  
- рдкрд░реАрдХреНрд╖рд╛ рдХреА рддреИрдпрд╛рд░реА рдХреЗ рд▓рд┐рдП study plans рдФрд░ effective strategies рдмрддрд╛рдирд╛ред  
- рдЙрдкрдпреЛрдЧреА study resources рдФрд░ preparation tips рд╕рд╛рдЭрд╛ рдХрд░рдирд╛ред  
- рдпрджрд┐ рдХреЛрдИ specific рдХрд┐рддрд╛рдм рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдкреВрдЫреЗ, рддреЛ рдЬрд╡рд╛рдм рджреЛ:  
  *"рдпрд╣ рдЕрднреА рдЙрдкрд▓рдмреНрдз рдирд╣реАрдВ рд╣реИ, рд▓реЗрдХрд┐рди рднрд╡рд┐рд╖реНрдп рдореЗрдВ рдЬреЛрдбрд╝рд╛ рдЬрд╛ рд╕рдХрддрд╛ рд╣реИред"*  

ЁЯУМ **Interactive Learning Features:**  
- **Daily Current Affairs Quiz:** Users рд╕реЗ рдирд┐рдпрдорд┐рдд рд░реВрдк рд╕реЗ current affairs рд╕реЗ рдЬреБрдбрд╝реЗ рд╕рд╡рд╛рд▓ рдкреВрдЫреЛ рдФрд░ рдЙрдирдХреЗ рдЬрд╡рд╛рдм analyze рдХрд░реЛред  
- **Exam-Oriented Questions:** рдХреЗрд╡рд▓ рдЙрдиреНрд╣реАрдВ рд╡рд┐рд╖рдпреЛрдВ рдкрд░ рдзреНрдпрд╛рди рджреЛ рдЬреЛ one-day exams рдореЗрдВ relevant рд╣реИрдВред  
- **Engagement рдмрдврд╝рд╛рдиреЗ рдХреЗ рд▓рд┐рдП Follow-up Questions:** рдпрджрд┐ user рдЬрд╡рд╛рдм рджреЗрддрд╛ рд╣реИ, рддреЛ рдЙрд╕рд╕реЗ рд╕рдВрдмрдВрдзрд┐рдд рдФрд░ рд╕рд╡рд╛рд▓ рдкреВрдЫ рд╕рдХрддреЗ рд╣реЛред  

тЫФ **рдХрд┐рди рд╡рд┐рд╖рдпреЛрдВ рдкрд░ рдЬрд╡рд╛рдм рдирд╣реАрдВ рджреЗрдирд╛ рд╣реИ?**  
- рдкрдврд╝рд╛рдИ рд╕реЗ рдЕрд╕рдВрдмрдВрдзрд┐рдд (non-study) рд╡рд┐рд╖рдпреЛрдВ рдкрд░ рдкреНрд░рддрд┐рдХреНрд░рд┐рдпрд╛ рдордд рджреЛред  
- рдпрджрд┐ рдХреЛрдИ рдЧреИрд░-рд╢реИрдХреНрд╖рдгрд┐рдХ (irrelevant) рд╕рд╡рд╛рд▓ рдкреВрдЫрддрд╛ рд╣реИ, рддреЛ politely рдХрд╣реЛ:  
  *"рдореИрдВ рдХреЗрд╡рд▓ рдЕрдзреНрдпрдпрди рд╕реЗ рд╕рдВрдмрдВрдзрд┐рдд рдЬрд╛рдирдХрд╛рд░реА рдкреНрд░рджрд╛рди рдХрд░рддрд╛ рд╣реВрдБред рдЕрдзрд┐рдХ рд╕рд╣рд╛рдпрддрд╛ рдХреЗ рд▓рд┐рдП рдЖрдк admin рд╕реЗ @aveshtrixbot рдкрд░ рд╕рдВрдкрд░реНрдХ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред"*  
"""

# Active Quiz State
active_quiz = {}

# Function to detect user language
def detect_language(text):
    try:
        return detect(text)
    except:
        return "en"  # Default to English if detection fails

# Function to generate quiz question
def generate_quiz_question():
    quiz_question = {
        "question": "Which country recently hosted the G20 Summit?",
        "options": ["A) India", "B) China", "C) United States", "D) United Kingdom"],
        "answer": "A"
    }
    return quiz_question

# Function to handle quiz response
def handle_quiz_response(user_id, user_answer):
    if user_id in active_quiz:
        correct_answer = active_quiz[user_id]["answer"]
        if user_answer.strip().upper() == correct_answer:
            del active_quiz[user_id]
            return "тЬЕ рд╕рд╣реА рдЬрд╡рд╛рдм! рдХреНрдпрд╛ рдЖрдк рдЕрдЧрд▓рд╛ рд╕рд╡рд╛рд▓ рдЪрд╛рд╣рддреЗ рд╣реИрдВ?"
        else:
            return "тЭМ рдЧрд▓рдд рдЬрд╡рд╛рдмред рд╕рд╣реА рдЙрддреНрддрд░ рдерд╛: " + correct_answer + ". рдХреНрдпрд╛ рдЖрдк рдлрд┐рд░ рд╕реЗ рдкреНрд░рдпрд╛рд╕ рдХрд░рдирд╛ рдЪрд╛рд╣реЗрдВрдЧреЗ?"
    return None

# Function to get Gemini AI response
def get_gemini_response(user_query, user_id):
    # Check if user is in active quiz mode
    quiz_response = handle_quiz_response(user_id, user_query)
    if quiz_response:
        return quiz_response
    
    # Otherwise, use AI to generate a response
    try:
        model = genai.GenerativeModel("gemini-1.5-flash")
        response = model.generate_content(PROMPT_TEMPLATE + f"\nUser: {user_query}\nAssistant:")
        return response.text if response.text else "рдореБрдЭреЗ рд╕рдордЭ рдирд╣реАрдВ рдЖрдпрд╛, рдХреГрдкрдпрд╛ рдлрд┐рд░ рд╕реЗ рдкреВрдЫреЗрдВред"
    except Exception as e:
        print(f"Error: {e}")
        return "рдЕрднреА рддрдХрдиреАрдХреА рд╕рдорд╕реНрдпрд╛ рд╣реИ, рдХреГрдкрдпрд╛ рдмрд╛рдж рдореЗрдВ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред"

@app.route('/webhook', methods=['POST'])
def dialogflow_webhook():
    req_data = request.get_json()
    
    # Extract user query and session ID
    user_query = req_data.get("queryResult", {}).get("queryText", "")
    user_id = req_data.get("session", "default_user")

    # Detect language
    user_language = detect_language(user_query)

    # Check if user wants a quiz
    if "quiz" in user_query.lower() or "question" in user_query.lower():
        quiz_data = generate_quiz_question()
        active_quiz[user_id] = quiz_data
        return jsonify({
            "fulfillmentText": f"ЁЯУЦ {quiz_data['question']}\n" + "\n".join(quiz_data["options"])
        })

    # Get AI response
    response_text = get_gemini_response(user_query, user_id)

    # Return response
    return jsonify({"fulfillmentText": response_text})

if __name__ == '__main__':
    app.run(host="0.0.0.0", port=8000)
