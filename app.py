import os
import google.generativeai as genai
from flask import Flask, request, jsonify
from dotenv import load_dotenv

# Load environment variables
load_dotenv()
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

# Initialize Gemini AI
genai.configure(api_key=GEMINI_API_KEY)

# Flask app setup
app = Flask(__name__)

# Root route for checking if the server is running
@app.route('/')
def home():
    return "It's working!"

# Health check route
@app.route('/health')
def health_check():
    return jsonify({"status": "ok", "message": "Server is running fine"}), 200

# **ЁЯУв Welcome Message for New Users (TELEGRAM_WELCOME Trigger)**
TELEGRAM_WELCOME_MESSAGE = """
*Welcome to the AtMini Bot Community\\!* ЁЯОЙ  

We're excited to have you join us\\! AtMini Bot is here to make your academic life easier with smart guidance, helpful resources, and automation features\\.  

This channel [@AtMiniOfficial](https://t.me/AtMiniOfficial) will keep you updated on the latest features, tips, and tricks to get the most out of AtMini Bot\\.  

Feel free to explore, ask questions, and share your feedback\\! We're here to help you succeed\\. Let's learn and grow together\\! тЬи
"""

# **ЁЯУМ Telegram-Friendly Response Template**
PROMPT_TEMPLATE = """
*AtMini Bot* \\- рдЖрдкрдХрд╛ рдкрд░реНрд╕рдирд▓ AI рдЕрд╕рд┐рд╕реНрдЯреЗрдВрдЯ, рдЬреЛ рдЖрдкрдХреА academic рдФрд░ daily life рдХреЛ рдЖрд╕рд╛рди рдмрдирд╛рдиреЗ рдХреЗ рд▓рд┐рдП рдмрдирд╛ рд╣реИред  
рддреБрдореНрд╣рд╛рд░рд╛ рдордХрд╕рдж рд╕рд┐рд░реНрдл рдкрдврд╝рд╛рдИ рдореЗрдВ рдорджрдж рдХрд░рдирд╛ рд╣реА рдирд╣реАрдВ, рдмрд▓реНрдХрд┐ students рдХреЛ smart рддрд░реАрдХреЗ рд╕реЗ guide рдХрд░рдирд╛ рдФрд░ automation features рд╕реЗ рдЙрдирдХреА рдЬрд┐рдВрджрдЧреА рдХреЛ рдЖрд╕рд╛рди рдмрдирд╛рдирд╛ рднреА рд╣реИред  

тЮд *рдореИрдВ рдЖрдкрдХреА рдХреИрд╕реЗ рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдБ?*  

ЁЯУЪ *рдкрдврд╝рд╛рдИ рдореЗрдВ рдорджрдж:*  
рдореИрдВ рдЖрдкрдХреЗ рд╕рд╡рд╛рд▓реЛрдВ рдХреЗ рдЬрд╡рд╛рдм рджреЗ рд╕рдХрддрд╛ рд╣реВрдБ, рдореБрд╢реНрдХрд┐рд▓ concepts рдХреЛ рд╕рдордЭрд╛ рд╕рдХрддрд╛ рд╣реВрдБ, рдФрд░ рдЖрдкрдХреЛ relevant resources рдвреВрдВрдврдиреЗ рдореЗрдВ рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдБред  

ЁЯОп *рд╕реНрдорд╛рд░реНрдЯ рдЧрд╛рдЗрдбреЗрдВрд╕:*  
рдореИрдВ рдЖрдкрдХреЛ study plans рдмрдирд╛рдиреЗ, time management skills рд╡рд┐рдХрд╕рд┐рдд рдХрд░рдиреЗ, рдФрд░ рдкрд░реАрдХреНрд╖рд╛ рдХреА рддреИрдпрд╛рд░реА рдХрд░рдиреЗ рдореЗрдВ рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдБред  

ЁЯдЦ *рдСрдЯреЛрдореЗрд╢рди:*  
рдореИрдВ рдЖрдкрдХреА daily life рдХреЗ рдХрдИ рдХрд╛рдореЛрдВ рдХреЛ automate рдХрд░ рд╕рдХрддрд╛ рд╣реВрдБ, рдЬреИрд╕реЗ reminders рд╕реЗрдЯ рдХрд░рдирд╛, рдиреЛрдЯреНрд╕ рд▓реЗрдирд╛, рдФрд░ рдЬрд╛рдирдХрд╛рд░реА рдвреВрдВрдврдирд╛ред  

рд╣рдорд╛рд░рд╛ рд╕рд┐рд╕реНрдЯрдо рд▓рдЧрд╛рддрд╛рд░ рдмреЗрд╣рддрд░ рд╣реЛ рд░рд╣рд╛ рд╣реИ, рдФрд░ рд╣рдо рдЬрд▓реНрдж рд╣реА рдЖрдкрдХреЗ рд▓рд┐рдП рдФрд░ рднреА рдЬреНрдпрд╛рджрд╛ automation рдФрд░ рд╕реБрд╡рд┐рдзрд╛рдПрдВ рдЬреЛрдбрд╝реЗрдВрдЧреЗред  

ЁЯУв *рдЕрдЧрд░ рдЖрдк рдЕрднреА рддрдХ рд╣рдорд╛рд░реЗ official channel рд╕реЗ рдирд╣реАрдВ рдЬреБрдбрд╝реЗ рд╣реИрдВ, рддреЛ рдЕрдкрдиреА learning experience рдХреЛ рдФрд░ рдмреЗрд╣рддрд░ рдмрдирд╛рдиреЗ рдХреЗ рд▓рд┐рдП рд╣рдорд╛рд░реЗ official channel рд╕реЗ рдЬреБрдбрд╝реЗрдВ:*  
ЁЯСЙ [@AtMiniOfficial](https://t.me/AtMiniOfficial)  

_рдореИрдВ рдЖрдкрдХреЗ рд╕рд╛рде рдХрд╛рдо рдХрд░рдиреЗ рдФрд░ рдЖрдкрдХреА academic рдФрд░ daily life рдореЗрдВ рд╕рдлрд▓ рд╣реЛрдиреЗ рдореЗрдВ рдорджрдж рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдЙрддреНрд╕реБрдХ рд╣реВрдБ!_  
"""

# **ЁЯУМ Function to Detect User Language**
def detect_language(user_query):
    if all(ord(char) < 128 for char in user_query):  # English characters only
        return "English"
    elif any("\u0900" <= char <= "\u097F" for char in user_query):  # Hindi characters detected
        return "Hindi"
    else:
        return "Hinglish"

# **ЁЯУМ Function to Get Response from Gemini AI**
def get_gemini_response(user_query):
    try:
        language = detect_language(user_query)

        if language == "English":
            prompt = "*Hello! I am AtMini Bot, your personal AI assistant\\.*\n\n" + PROMPT_TEMPLATE
        elif language == "Hindi":
            prompt = "*рдирдорд╕реНрдХрд╛рд░! рдореИрдВ AtMini Bot, рдЖрдкрдХрд╛ рдкрд░реНрд╕рдирд▓ AI рдЕрд╕рд┐рд╕реНрдЯреЗрдВрдЯ рд╣реВрдБ\\.*\n\n" + PROMPT_TEMPLATE
        else:
            prompt = "*Hey! I'm AtMini Bot, your smart study assistant\\!* \n\n" + PROMPT_TEMPLATE

        model = genai.GenerativeModel("gemini-2.0-flash")
        response = model.generate_content(prompt + f"\nUser: {user_query}\nAssistant:")

        return response.text if response.text else "рдореБрдЭреЗ рд╕рдордЭ рдирд╣реАрдВ рдЖрдпрд╛, рдХреГрдкрдпрд╛ рдлрд┐рд░ рд╕реЗ рдкреВрдЫреЗрдВред"

    except Exception as e:
        print(f"Error: {e}")
        return "рдЕрднреА рддрдХрдиреАрдХреА рд╕рдорд╕реНрдпрд╛ рд╣реИ, рдХреГрдкрдпрд╛ рдмрд╛рдж рдореЗрдВ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред"

# **ЁЯУМ Webhook Route for Dialogflow**
@app.route('/webhook', methods=['POST'])
def dialogflow_webhook():
    req_data = request.get_json()

    # **ЁЯСЙ Extract Intent Name**
    intent_name = req_data.get("queryResult", {}).get("intent", {}).get("displayName", "")

    # **ЁЯСЙ Extract User Query**
    user_query = req_data.get("queryResult", {}).get("queryText", "")

    # **ЁЯЯв Handle TELEGRAM_WELCOME Intent**
    if intent_name == "TELEGRAM_WELCOME":
        response_text = TELEGRAM_WELCOME_MESSAGE
    else:
        response_text = get_gemini_response(user_query)

    # **ЁЯСЙ Return Response to Dialogflow**
    return jsonify({"fulfillmentText": response_text})

# **ЁЯЪА Run Flask App**
if __name__ == '__main__':
    app.run(host="0.0.0.0", port=8000)
