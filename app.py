import os
import google.generativeai as genai
from flask import Flask, request, jsonify
from dotenv import load_dotenv

# Load environment variables
load_dotenv()
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

# Initialize Gemini AI
genai.configure(api_key=GEMINI_API_KEY)

# Flask app setup
app = Flask(__name__)

# In-memory storage for user preferences and last question asked
user_preferences = {}
user_last_question = {}

# Custom prompt for Gemini AI
PROMPT_TEMPLATE = """
рддреБрдо рдПрдХ рдкрдврд╝рд╛рдИ рдореЗрдВ рдорджрдж рдХрд░рдиреЗ рд╡рд╛рд▓реЗ рд╕рд╣рд╛рдпрдХ рд╣реЛред рддреБрдореНрд╣рд╛рд░рд╛ рдХрд╛рдо рд╕рд┐рд░реНрдл study-related рд╕рд╡рд╛рд▓реЛрдВ рдХреЗ рдЬрд╡рд╛рдм рджреЗрдирд╛ рд╣реИред

ЁЯУМ **Speedy Current Affairs PDFs:**  
- рдЙрдкрд▓рдмреНрдз PDFs: January, February, рдФрд░ March (рд╣рд░ рдорд╣реАрдиреЗ рдХреА 5-10 рддрд╛рд░реАрдЦ рдХреЗ рдмреАрдЪ upload рд╣реЛрдЧреА)ред  
- рдЕрдЧрд░ рдХреЛрдИ рдЗрдирд╕реЗ related рдкреВрдЫреЗ, рддреЛ рдмрддрд╛рдУ рдХрд┐ рдЕрднреА рдХреМрди-рдХреМрди рд╕реА PDF рдЙрдкрд▓рдмреНрдз рд╣реИред  

ЁЯУМ **Study Time Table & Distraction рд╕реЗ рдмрдЪрд╛рд╡:**  
- рдЕрдЧрд░ рдХреЛрдИ Study Time Table рдпрд╛ рдкрдврд╝рд╛рдИ рдореЗрдВ рдзреНрдпрд╛рди рд▓рдЧрд╛рдиреЗ рдХреЗ рддрд░реАрдХреЗ рдкреВрдЫреЗ, рддреЛ рдЙрд╕реЗ рдПрдХ рдкреНрд░рднрд╛рд╡реА Time Table рдмрддрд╛рдУред  
- Focus рдмрдирд╛рдП рд░рдЦрдиреЗ рдХреЗ рддрд░реАрдХреЗ рдмрддрд╛рдУред  

ЁЯУМ **GK, GS рдФрд░ Science:**  
- рдЕрдЧрд░ рдХреЛрдИ GK, GS рдпрд╛ Science рд╕реЗ рдЬреБрдбрд╝рд╛ рд╕рд╡рд╛рд▓ рдкреВрдЫреЗ, рддреЛ рдЙрд╕реЗ рд╕рд╣реА рдЬрд╛рдирдХрд╛рд░реА рджреЛред  

ЁЯУМ **Books Availability:**  
- рдЕрдЧрд░ рдХреЛрдИ рдХрд┐рд╕реА рдХрд┐рддрд╛рдм рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдкреВрдЫреЗ, рддреЛ рдХрд╣реЛ: "рдЕрднреА рдпрд╣ рдЙрдкрд▓рдмреНрдз рдирд╣реАрдВ рд╣реИ, рд▓реЗрдХрд┐рди рднрд╡рд┐рд╖реНрдп рдореЗрдВ рдЗрд╕реЗ рднреА рдЕрдкрд▓реЛрдб рдХрд┐рдпрд╛ рдЬрд╛рдПрдЧрд╛ред"  

ЁЯУМ **Admin рд╕реЗ Contact:**  
- рдЕрдЧрд░ рдХреЛрдИ user admin рд╕реЗ рдмрд╛рдд рдХрд░рдирд╛ рдЪрд╛рд╣реЗ, рддреЛ professional рддрд░реАрдХреЗ рд╕реЗ рдХрд╣реЛ:  
  "рдЖрдк admin рд╕реЗ рдмрд╛рдд рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП @aveshtrixbot рдкрд░ рд╕рдВрдкрд░реНрдХ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред"

тЪа **Important:**  
- Non-study topics рдкрд░ response рдордд рджреЛред  
- рдЕрдЧрд░ рдХреЛрдИ irrelevant рд╕рд╡рд╛рд▓ рдкреВрдЫреЗ, рддреЛ politely рдХрд╣реЛ:  
  "рдореИрдВ рд╕рд┐рд░реНрдл рдкрдврд╝рд╛рдИ рд╕реЗ рдЬреБрдбрд╝реА рдЬрд╛рдирдХрд╛рд░реА рджреЗ рд╕рдХрддрд╛ рд╣реВрдБред рдЕрдзрд┐рдХ рдЬрд╛рдирдХрд╛рд░реА рдХреЗ рд▓рд┐рдП рдЖрдк admin рд╕реЗ @aveshtrixbot рдкрд░ рд╕рдВрдкрд░реНрдХ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред"
  
ЁЯУМ **Quiz Interaction:**  
- **рд╣рд░ рдЬрд╡рд╛рдм рдХреЗ рдмрд╛рдж:** "рдХреНрдпрд╛ рдореИрдВ рдЖрдкрд╕реЗ рдПрдХ рд╕рд╡рд╛рд▓ рдкреВрдЫ рд╕рдХрддрд╛ рд╣реВрдБ?"  
- **рдЕрдЧрд░ user "рд╣рд╛рдБ" рдпрд╛ "yes" рдХрд╣реЗ:** рддреЛ рдПрдХ GK, GS, рдпрд╛ Current Affairs рдХрд╛ рд╕рд╡рд╛рд▓ рдкреВрдЫреЛред
- **рдЕрдЧрд░ рд╕рд╣реА рдЬрд╡рд╛рдм рджреЗ:** рддреЛ "Well done!" рдХрд╣реЛ рдФрд░ рдкреВрдЫреЛ "рдФрд░ рд╕рд╡рд╛рд▓ рдкреВрдЫреВрдВ рдпрд╛ рдХреБрдЫ рдФрд░ рдЬрд╛рдирдирд╛ рдЪрд╛рд╣рддреЗ рд╣реЛ?"
- **рдЕрдЧрд░ рдЧрд▓рдд рдЬрд╡рд╛рдм рджреЗ:** рддреЛ рд╕рд╣реА рдЬрд╡рд╛рдм рд╕рдВрдХреНрд╖реЗрдк рдореЗрдВ рдмрддрд╛рдУред  
"""

# Function to get Gemini AI response
def get_gemini_response(user_query, user_id):
    """ Gemini AI рд╕реЗ controlled response рд▓реЗрдиреЗ рдХреЗ рд▓рд┐рдП function """
    try:
        model = genai.GenerativeModel("gemini-pro")
        response = model.generate_content(PROMPT_TEMPLATE + f"\nUser: {user_query}\nAssistant:")
        return response.text if response.text else "рдореБрдЭреЗ рд╕рдордЭ рдирд╣реАрдВ рдЖрдпрд╛, рдХреГрдкрдпрд╛ рдлрд┐рд░ рд╕реЗ рдкреВрдЫреЗрдВред"
    except Exception as e:
        print(f"Error: {e}")
        return "рдЕрднреА рддрдХрдиреАрдХреА рд╕рдорд╕реНрдпрд╛ рд╣реИ, рдХреГрдкрдпрд╛ рдмрд╛рдж рдореЗрдВ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред"

# Function to get user preferences
def get_user_preferences(user_id):
    return user_preferences.get(user_id, "GK")  # Default preference is 'GK'

# Function to set user preferences
def set_user_preferences(user_id, new_preference):
    user_preferences[user_id] = new_preference

# Function to get last question asked by user
def get_last_question(user_id):
    return user_last_question.get(user_id, None)

# Function to set last question asked
def set_last_question(user_id, question):
    user_last_question[user_id] = question

@app.route('/webhook', methods=['POST'])
def dialogflow_webhook():
    req_data = request.get_json()
    
    # Extract user query and user ID
    user_query = req_data.get("queryResult", {}).get("queryText", "")
    user_id = req_data.get("originalDetectIntentRequest", {}).get("payload", {}).get("user", {}).get("userId", "default_user")
    
    # Get user preferences and last question for contextual continuity
    last_question = get_last_question(user_id)
    user_pref = get_user_preferences(user_id)
    
    # Call Gemini AI
    response_text = get_gemini_response(user_query, user_id)
    
    # Quiz Interaction: ask if the bot can ask a question after the answer
    response_text += "\nрдХреНрдпрд╛ рдореИрдВ рдЖрдкрд╕реЗ рдПрдХ рд╕рд╡рд╛рд▓ рдкреВрдЫ рд╕рдХрддрд╛ рд╣реВрдБ?"
    
    # After a response, store the last question asked for continuity
    set_last_question(user_id, user_query)

    # Return response
    return jsonify({"fulfillmentText": response_text})

if __name__ == '__main__':
    app.run(host="0.0.0.0", port=8000)
